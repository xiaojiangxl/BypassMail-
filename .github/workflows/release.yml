# 工作流名称
name: Release Go Binaries as Packaged Archives

# 触发条件：当一个以 'v' 开头的标签被推送到仓库时
on:
  push:
    tags:
      - 'v*'

# 任务（Jobs）
jobs:
  # 编译并打包任务
  build_and_package:
    # 任务名称
    name: Build and Package Binaries
    # 运行此任务的虚拟机环境
    runs-on: ubuntu-latest
    # 构建矩阵，用于交叉编译
    strategy:
      matrix:
        # 定义不同的目标平台
        goos: [linux, windows, darwin] # darwin 是 macOS 的内部名称
        goarch: [amd64]
        # 使用 include 来增加特定的组合
        include:
          - goos: darwin
            goarch: arm64 # 增加 M1 (arm64) 架构的 macOS

    # 任务步骤
    steps:
      # 步骤1：检出您的代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤2：设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.18' # 您可以根据需要更改 Go 版本

      # 步骤3：交叉编译并注入版本号
      - name: Build with version injection
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
          echo "Building version $VERSION for ${GOOS}/${GOARCH}..."
          # 根据操作系统确定二进制文件名和扩展名
          BINARY_NAME="bypass-mail"
          if [ "${GOOS}" == "windows" ]; then
            BINARY_NAME="bypass-mail.exe"
          fi
          # 创建 build 目录并执行编译
          mkdir -p build
          go build -v -ldflags="-s -w -X main.version=$VERSION" -o build/${BINARY_NAME} ./cmd/bypass-mail/

      # 步骤4：准备用于打包的完整目录结构
      - name: Prepare package structure
        run: |
          # 创建一个干净的打包目录
          mkdir -p package
          # 将编译好的二进制文件移动到打包目录
          mv build/* package/
          # 将配置文件和模板完整地复制到打包目录
          cp -r configs package/
          cp -r templates package/

      # 步骤5：根据不同平台创建压缩包
      - name: Create archive package
        run: |
          # 定义压缩包的名称
          ARTIFACT_NAME="bypass-mail-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          # 进入打包目录进行操作，以保证压缩包内的目录结构是干净的
          cd package
          # 为 Windows 创建 .zip, 为其他系统创建 .tar.gz
          if [ "${{ matrix.goos }}" == "windows" ]; then
            zip -r ../${ARTIFACT_NAME}.zip .
          else
            tar -czf ../${ARTIFACT_NAME}.tar.gz .
          fi
          # 将最终的压缩包文件名写入环境变量，供后续步骤使用
          if [ "${{ matrix.goos }}" == "windows" ]; then
             echo "ARCHIVE_FILE=${ARTIFACT_NAME}.zip" >> $GITHUB_ENV
          else
             echo "ARCHIVE_FILE=${ARTIFACT_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      # 步骤6：将最终的压缩包作为产物上传
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bypass-mail-archive-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.ARCHIVE_FILE }}
          retention-days: 1

  # 发布任务 (此任务基本保持不变)
  release:
    name: Create GitHub Release
    needs: build_and_package
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # 上传所有下载的压缩包
          files: release-artifacts/**/*/*